#pragma kernel SwarmMain
struct Swarmer {
    float3 position;	// = 12
	float3 velocity;	// = 12
    float life;			// = 4
	float startDelay;	// = 4
};

struct SwarmTarget {
    float3 position;
    float hp;
};

struct WorldNode {
	float3 position;	// = 12
	float occupied;		// = 4
	float trace;
};

RWStructuredBuffer<Swarmer> swarmers;
RWStructuredBuffer<SwarmTarget> targets;
RWStructuredBuffer<WorldNode> world;
float3 hiveX;
float3 hiveY;
float3 hiveZ;
float swarmerVelocity;
float deltaTime;
float elapsedTime;
int width;
int height;
int depth;
float curlE;
float dir;

uint rng_state;
uint rand_xorshift()
{
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

uint wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}



/*
    Create a position for the hive.

    Create a buffer with entitites.
    
    Create a buffer with targets (containing direction).

    Create a 3D buffer for path tracers.

    ------------

    Update the position of the swarmers each frame. 

        Set a weak path tracer in the 3D buffer.

    Sample the 3D buffer with path tracers around the current node.

        if a weak tracer is found. modify the direction slightly towards that node.

        if a strong tracer is found. modify the direction strongly towards that node. 

    If a target is found.
        
        set a state in the entity (collected = true etc)

        make the entity move back towards the hive via the path tracers (opposire direction of which they are poitning).

    If collected && position == hive.position

        collected = false

    Entities have a timer. If that timer reaches 0 it will return to the hive regardless.
        
        during retreat, they will not place pathtracers.

*/
float3 RandomDirection(int seed) {
	rng_state = seed;
	float r0 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	float r1 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	float r2 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	return normalize(float3(r0, r1, r2));
}


[numthreads(10,10,10)]
void SwarmMain (uint3 id : SV_DispatchThreadID)
{
	int sampleIndex = id.x + width * (id.y + height * id.z);
	

	// Reduce the trace of all nodes in the world.
	world[sampleIndex].position = float3(id.x, id.y, id.z);
	world[sampleIndex].trace = max(0, world[sampleIndex].trace - 0.01);
	
	Swarmer swarmer = swarmers[sampleIndex];
	swarmer.life -= deltaTime;
	swarmer.position += swarmer.velocity * deltaTime * 20 * step(swarmer.startDelay, elapsedTime);
	
	float highestTrace = 0;
	WorldNode bestNeightbour;

	int swarmerSampleIndex = swarmer.position.x + width * (swarmer.position.y + height * swarmer.position.z);
	world[swarmerSampleIndex].trace = min(world[swarmerSampleIndex].trace + 0.01, 1);
	
	for (int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			for (int z = -1; z <= 1; z++)
			{
				int neightbourSampleIndex = swarmer.position.x + x + width * (swarmer.position.y + y + height * (swarmer.position.z + z));
				WorldNode wn = world[neightbourSampleIndex];
				highestTrace = max(wn.trace, highestTrace);
				if (wn.trace > highestTrace)
				{
					highestTrace = wn.trace;
					bestNeightbour = wn;
				}
			}
		}
	}

	swarmer.velocity = lerp(swarmer.velocity, normalize(bestNeightbour.position - swarmer.position), 0.002);
	



	/*
	if (swarmer.life <= 0)
	{
		//swarmer.position = hivePosition + RandomDirection(sampleIndex)/ 10.0;
		//swarmer.startDelay = RandomDirection(sampleIndex).x;
		swarmer.velocity *= -1;
		swarmer.life = 10;
	}*/

	swarmers[sampleIndex] = swarmer;

}
