#pragma kernel WorldUpdateMain
#pragma kernel SwarmMain

struct Swarmer {
    float3 position;		// = 12
	float3 previousPosition;// = 12
	float3 direction;		// = 12
    float life;				// = 4
	float startDelay;		// = 4
	float3 color;			// = 12
};

struct SwarmTarget {
    float3 position;
    float hp;
};

RWStructuredBuffer<Swarmer> swarmers;
RWStructuredBuffer<SwarmTarget> targets;
RWTexture3D<float4> worldTex;
float hiveX;
float hiveY;
float hiveZ;
float swarmerVelocity;
float deltaTime;
float elapsedTime;
int width;
int height;
int depth;
float curlE;
float dir;
float traceAdd;
float traceDecay;
float traceAttraction;
float swarmerSpeed;
float randomness;


float4x4 rot1;
float4x4 rot2;
float4x4 rot3;
float4x4 rot4;
float4x4 rot5;
float4x4 rot6;

float3 samplePositions[6];

uint rng_state;
uint rand_xorshift()
{
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

uint wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

float3 RandomDirection(int seed) {
	rng_state = seed;
	float r0 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	float r1 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	float r2 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	return normalize(float3(r0, r1, r2));
}


[numthreads(10, 10, 10)]
void WorldUpdateMain(uint3 id : SV_DispatchThreadID) {
	// Decay the trace
	float4 current = worldTex[id.xyz];
	float4 updated = float4(saturate(current.x - traceDecay * deltaTime), current.y, 0, 0);
	worldTex[id.xyz] = updated;
}


[numthreads(1000,1,1)]
void SwarmMain (uint3 id : SV_DispatchThreadID)
{
	int sampleIndex = id.x;// +width * (id.y + height * id.z);
	
	// Get the swarmer from the buffer
	Swarmer swarmer = swarmers[sampleIndex];

	swarmer.life -= deltaTime;
	
	// Update the swarmer position;
	swarmer.previousPosition = swarmer.position;
	swarmer.position += normalize((swarmer.direction + RandomDirection(sampleIndex)* randomness)) * deltaTime * swarmerSpeed;
	swarmer.color = float3(id.x / width, id.y / height, id.y / depth);
	
	// Check if entered new worldnode
	int3 prevPosCoord = int3(int(swarmer.previousPosition.x), int(swarmer.previousPosition.y), int(swarmer.previousPosition.z));
	int3 posCoord = int3(int(swarmer.position.x), int(swarmer.position.y), int(swarmer.position.z));

	// If reached new worldnode: update trace and population count.
	if (posCoord.x != prevPosCoord.x || posCoord.y != prevPosCoord.y || posCoord.z != prevPosCoord.z)
	{
		worldTex[prevPosCoord] = float4(worldTex[prevPosCoord].x, worldTex[prevPosCoord].y - 1, 0, 0);
		worldTex[posCoord] = float4(worldTex[posCoord].x + traceAdd, worldTex[posCoord].y + 1, 0, 0);
	}

	const float worldEpsilon = 2.0;

	// Check if inside bounds
	bool insideWidth = swarmer.position.x >= worldEpsilon && swarmer.position.x <= (width - worldEpsilon);
	bool insideHeight = swarmer.position.y >= worldEpsilon && swarmer.position.y <= (height - worldEpsilon);
	bool insideDepth = swarmer.position.z >= worldEpsilon && swarmer.position.z <= (height - worldEpsilon);

	if (!insideWidth || !insideHeight || !insideDepth)
	{
		swarmer.direction = normalize(normalize(float3(hiveX, hiveY, hiveZ) - swarmer.position));
	}

	// Get the swarmer world coord
	int3 swarmerWorldCoord = int3(int(swarmer.position.x),int(swarmer.position.y), int(swarmer.position.z));

	// Calculate 6 vectors to sample around swarmer forward direction.
	float4 s1 = mul(rot1, float4(swarmer.direction, 1));
	float4 s2 = mul(rot2, float4(swarmer.direction, 1));
	float4 s3 = mul(rot3, float4(swarmer.direction, 1));
	float4 s4 = mul(rot4, float4(swarmer.direction, 1));
	float4 s5 = mul(rot5, float4(swarmer.direction, 1));
	float4 s6 = mul(rot6, float4(swarmer.direction, 1));

	samplePositions[0] = swarmer.position + s1.xyz * 1.42; 
	samplePositions[1] = swarmer.position + s2.xyz * 1.42;
	samplePositions[2] = swarmer.position + s3.xyz * 1.42;
	samplePositions[4] = swarmer.position + s4.xyz * 1.42;
	samplePositions[5] = swarmer.position + s5.xyz * 1.42;


	// Get the direction where the trace is highest
	float3 bestTarget = swarmer.position + swarmer.direction * 1.5;
	float bestTrace = 0;

	float maxPopulation = 10;

	[unroll]
	for (int i = 0; i < 6; i++)
	{
		float3 pos = samplePositions[i];
		float trace = worldTex[pos].x;
		trace *= step(worldTex[pos].y, maxPopulation);

		float stepVal = step(bestTrace, trace);
		bestTarget = lerp(bestTarget, pos, stepVal);
		bestTrace = lerp(bestTrace, trace, stepVal);
	}

	float traceAtTarget = worldTex[bestTarget].x;
	float3 traceDir = bestTarget - swarmer.position;

	swarmer.direction = normalize(lerp(swarmer.direction, normalize(traceDir), traceAttraction));

	float3 toHive = float3(hiveX, hiveY, hiveZ) - swarmer.position;

	swarmer.direction = normalize(lerp(swarmer.direction, normalize(toHive), length(toHive) / 2000.0));
	swarmer.color = float3(traceAtTarget, 0, 0);
	
	swarmers[sampleIndex] = swarmer;

}
