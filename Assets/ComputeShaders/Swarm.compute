#pragma kernel SwarmMain

struct Swarmer {
    float3 position;	// = 12
	float3 velocity;	// = 12
    float life;			// = 4
};

struct SwarmTarget {
    float3 position;
    float hp;
};

struct WorldNode {
	float3 position;	// = 12
	float occupied;		// = 4
};

RWStructuredBuffer<Swarmer> swarmers;
RWStructuredBuffer<SwarmTarget> targets;
RWStructuredBuffer<WorldNode> world;
float3 hivePosition;
float swarmerVelocity;
float deltaTime;
int width;
int height;
int depth;

/*
    Create a position for the hive.

    Create a buffer with entitites.
    
    Create a buffer with targets (containing direction).

    Create a 3D buffer for path tracers.

    ------------

    Update the position of the swarmers each frame. 

        Set a weak path tracer in the 3D buffer.

    Sample the 3D buffer with path tracers around the current node.

        if a weak tracer is found. modify the direction slightly towards that node.

        if a strong tracer is found. modify the direction strongly towards that node. 

    If a target is found.
        
        set a state in the entity (collected = true etc)

        make the entity move back towards the hive via the path tracers (opposire direction of which they are poitning).

    If collected && position == hive.position

        collected = false

    Entities have a timer. If that timer reaches 0 it will return to the hive regardless.
        
        during retreat, they will not place pathtracers.

*/


[numthreads(10,10,10)]
void SwarmMain (uint3 id : SV_DispatchThreadID)
{
    // Flat[x + WIDTH * (y + DEPTH * z)] = Original[x, y, z]
	// Flat[x + WIDTH * (y + HEIGHT * z)] = Original[x, y, z]

	float nodeSize = 0.5;
	int sampleIndex = id.x + width * (id.y + height * id.z);

	WorldNode node;
	//node.position 
	node.occupied = 0;
	world[sampleIndex].position = float3(id.x, id.y, id.z);
	world[sampleIndex].occupied = 0;
}
