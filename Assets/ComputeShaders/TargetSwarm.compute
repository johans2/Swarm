#pragma kernel TargetWorldUpdateMain
#pragma kernel TargetSwarmMain

struct Swarmer {
    float3 color;           // = 12
    float3 position;		// = 12
	float3 previousPosition;// = 12
	float3 direction;		// = 12
	float scent;            // = 4
	float pheromoneScent;   // = 4
	// Stride                  = 56
};

struct SwarmTarget {
    float3 position;    // = 12
    float hp;           // = 4
    // Stride              = 16
};


// Hive properties
float hiveRadius;
float hiveX;
float hiveY;
float hiveZ;

// Swarmer properties
RWStructuredBuffer<Swarmer> swarmers;
float traceAdd;
float traceDecay;
float traceAttraction;
float swarmerSpeed;
float randomness;

// Swarm target properties
RWStructuredBuffer<SwarmTarget> targets;
int numTargets;

// World properties
RWTexture3D<float4> worldTex;
int width;
int height;
int depth;

// Time properties
float deltaTime;
float elapsedTime;

float curlE;
float dir;
static float EPSILON = 0.00000001;

// Sample vector rotation matrices
float4x4 rot1;
float4x4 rot2;
float4x4 rot3;
float4x4 rot4;
float4x4 rot5;
float4x4 rot6;
float3 samplePositions[6];

uint rng_state;
uint rand_xorshift()
{
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

uint wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

float3 RandomDirection(int seed) {
	rng_state = seed;
	float r0 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	float r1 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	float r2 = float(rand_xorshift()) * (1.0 / 4294967296.0) * 2 - 1;
	return normalize(float3(r0, r1, r2));
}


[numthreads(10, 10, 10)]
void TargetWorldUpdateMain(uint3 id : SV_DispatchThreadID) {
	// Decay the trace
	float4 current = worldTex[id.xyz];
	float4 updated = float4(saturate(current.x - traceDecay * deltaTime), current.y, 0, 0);
	worldTex[id.xyz] = updated;
}


[numthreads(1000,1,1)]
void TargetSwarmMain (uint3 id : SV_DispatchThreadID)
{
	int sampleIndex = id.x;
	
    float3 hivePos = float3(hiveX, hiveY, hiveZ);

	// Get the swarmer from the buffer
	Swarmer swarmer = swarmers[sampleIndex];
    
    // Calculate the default move diretion.
    float3 defaultDirection = swarmer.direction * normalize(sin(elapsedTime) + EPSILON );
        
    // Calculate the distance to the targets
    for(int i = 0; i < numTargets; i++) {
        SwarmTarget target = targets[i];
        float distanceToTarget = distance(target.position, swarmer.position);
        if(distanceToTarget < 5.0) {
            defaultDirection = normalize(target.position - swarmer.position);
        }
    }
      
    // State 1: Moving out of the hive in a somawhat random direction
    // State 2: Moving toward the hive since due to fatigue.
    // State 3: Found a trance and following it
    // State 4: Found a target and moving towards it
    // State 5: Reached a target and now movint back to the hive. 
            
    /*
    float randomness = 0.1;        
    int random = wang_hash(id.x+id.y+id.z);
    defaultDirection = lerp(defaultDirection, RandomDirection(random), randomness); 
    */
        
    swarmer.previousPosition = swarmer.position;
    swarmer.position = swarmer.previousPosition + defaultDirection * deltaTime * swarmerSpeed;
    
    swarmer.color = float3(0,1,0);

	swarmers[sampleIndex] = swarmer;
}
